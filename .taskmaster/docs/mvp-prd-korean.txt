# TubeSpy MVP - 최소 기능 제품

<context>
# 개요  
TubeSpy MVP는 유튜브 분석 기능의 핵심만 제공하여 제품 컨셉을 검증하고 초기 사용자를 확보하는 것이 목표입니다. 합리적인 개발 기간 내에 달성 가능하면서도 가치를 보여줄 수 있는 필수 기능들에 집중합니다.

MVP 대상 사용자:
- 기본적인 분석 인사이트를 원하는 개인 유튜버
- 자신의 성과를 이해하고 싶은 소규모 채널 운영자
- 고급 기능 사용 전에 플랫폼을 테스트해보고 싶은 사용자

# MVP 핵심 기능들  

## 1. 사용자 인증 & 채널 연결
- **목적**: 안전한 사용자 접근 및 유튜브 채널 연동
- **기능**: 구글 OAuth 로그인, 채널 선택, 기본 프로필 관리
- **가치**: 개인화된 분석을 위한 필수 기반

## 2. 기본 유튜브 분석 대시보드
- **목적**: 핵심 채널 성과 지표 표시
- **주요 지표**: 구독자 수, 조회수, 최근 영상 성과, 참여율
- **가치**: 유튜브 스튜디오보다 더 나은 시각화 제공

## 3. 채널 성과 개요
- **목적**: 과거 성과 추적 및 트렌드 분석
- **기능**: 차트 시각화, 기본 트렌드 분석, 성과 요약
- **가치**: 크리에이터가 성장 궤적을 이해할 수 있도록 도움

## 4. 영상 분석
- **목적**: 개별 영상 성과 인사이트
- **기능**: 영상 목록, 영상별 기본 지표, 간단한 비교
- **가치**: 어떤 콘텐츠가 가장 잘 되는지 이해

## 5. 반응형 웹 인터페이스
- **목적**: 모든 기기에서 접근 가능
- **기능**: 모바일 친화적 디자인, 직관적 네비게이션, 깔끔한 UI
- **가치**: 기존 도구보다 나은 현대적 사용자 경험

# MVP 사용자 경험

## 사용자 페르소나
1. **개인 콘텐츠 크리에이터**: 유튜브 스튜디오보다 나은 분석을 원하는 개인
2. **소규모 채널 운영자**: 기본적인 성장 목표를 가진 크리에이터

## 주요 사용자 플로우
1. **온보딩**: 가입 → 구글 계정 연결 → 유튜브 채널 선택 → 대시보드 확인
2. **일상 사용**: 로그인 → 대시보드 확인 → 최근 영상 성과 검토 → 트렌드 파악
3. **영상 분석**: 영상 목록 탐색 → 영상 선택 → 상세 지표 확인

## UI/UX 고려사항
- 학습 곡선이 최소화된 간단하고 깔끔한 인터페이스
- 복잡한 기능보다는 데이터 시각화에 집중
- 빠른 로딩 시간과 반응형 디자인
- 핵심 기능을 위한 명확한 행동 유도 버튼
</context>

<PRD>
# MVP 기술 아키텍처

## 시스템 구성요소
- **프론트엔드**: Next.js 14 (App Router), React 18, TypeScript
- **스타일링**: TailwindCSS + Shadcn/ui 컴포넌트
- **인증**: NextAuth.js + 구글 OAuth
- **데이터베이스**: PostgreSQL + Prisma ORM (간소화된 스키마)
- **배포**: Vercel

## MVP용 간소화된 데이터 모델
- **User**: id, email, name, google_id, created_at
- **Channel**: id, youtube_id, user_id, name, subscriber_count, view_count, updated_at
- **Video**: id, youtube_id, channel_id, title, published_at, view_count, like_count, comment_count

## API 및 통합
- **YouTube Data API v3**: 핵심 기능만
- **NextAuth.js**: 인증
- **Prisma**: 데이터베이스 작업

## 인프라 요구사항
- **호스팅**: Vercel (초기엔 무료 플랜)
- **데이터베이스**: Supabase 무료 플랜
- **캐싱 레이어**: 없음 (단순하게 유지)

# MVP 개발 로드맵

## 1단계: 기반 구축 (1주차)
- Next.js 14, TypeScript, TailwindCSS 프로젝트 셋업
- Shadcn/ui 컴포넌트 라이브러리 설정
- 기본 프로젝트 구조 및 설정

## 2단계: 핵심 백엔드 (2주차)
- 데이터베이스 스키마 설계 및 Prisma 셋업
- NextAuth.js로 구글 OAuth 인증
- YouTube Data API 통합 (기본 엔드포인트)

## 3단계: 기본 프론트엔드 (3주차)
- 인증 UI (로그인/로그아웃)
- 채널 연결 플로우
- 기본 대시보드 레이아웃 및 컴포넌트

## 4단계: 분석 화면 (4주차)
- 채널 분석 대시보드
- 영상 목록 및 기본 영상 분석
- 데이터 시각화를 위한 차트 컴포넌트

## 5단계: 완성 & 배포 (5주차)
- 에러 처리 및 사용자 피드백
- 반응형 디자인 개선
- MVP 배포 및 테스트

# MVP 논리적 의존성 체인

## 기반 먼저
1. **프로젝트 셋업**: Next.js, TypeScript, TailwindCSS, Shadcn/ui
2. **데이터베이스 셋업**: 간소화된 Prisma 스키마, Supabase 연결
3. **인증**: NextAuth.js + 구글 OAuth

## 핵심 기능
4. **YouTube API 통합**: 기본 채널 및 영상 데이터 가져오기
5. **채널 연결**: 유튜브 채널 연결을 위한 UI 플로우
6. **데이터 저장**: 채널 및 영상 데이터를 데이터베이스에 저장

## 사용자 인터페이스
7. **대시보드 레이아웃**: 네비게이션이 있는 기본 반응형 레이아웃
8. **분석 화면**: 차트 및 지표 시각화
9. **영상 분석**: 영상 목록 및 상세 화면

## 마무리 작업
10. **에러 처리**: 기본 에러 상태 및 사용자 피드백
11. **성능**: 기본 최적화 및 로딩 상태
12. **배포**: Vercel에 프로덕션 배포

# MVP 범위 제한사항

## MVP에 포함되지 않는 것들
- AI 기반 기능 (Gemini 통합)
- 실시간 업데이트 (WebSocket)
- 경쟁사 추적
- 다중 채널 관리
- 팀 협업 기능
- 고급 분석 및 리포팅
- 구독/결제 기능
- 성과 예측
- 트렌드 분석
- 캐싱 최적화

## 향후 개선사항 (Post-MVP)
- 메인 PRD의 모든 고급 기능
- 사용자 피드백 기반 UI/UX 개선
- 성능 최적화
- 모바일 앱 개발
- 수익화 기능

# MVP 성공 지표

## 기술적 성공
- **기능성**: 모든 핵심 기능이 안정적으로 작동
- **성능**: 페이지 로딩 시간 3초 이내
- **신뢰성**: 테스트 기간 동안 99% 가동률

## 사용자 성공
- **사용자 등록**: 10명 이상의 테스트 사용자 온보딩 가능
- **핵심 워크플로우**: 사용자가 채널 연결 및 분석 확인 성공
- **사용자 피드백**: 핵심 가치 제안에 대한 긍정적 피드백

## 비즈니스 성공
- **가치 증명**: 유튜브 스튜디오 분석 대비 명확한 개선
- **사용자 유지**: 테스트 사용자가 초기 시험 후에도 계속 사용
- **피드백 수집**: 제품 컨셉 및 기능 우선순위 검증

# MVP 위험 요소 및 완화 방안

## 기술적 위험
- **YouTube API 제한**: 보수적인 사용량으로 시작, 기본 속도 제한 구현
- **인증 문제**: 잘 검증된 NextAuth.js 패턴 사용
- **데이터베이스 성능**: 스키마를 단순하게 유지, 나중에 최적화 추가

## 범위 위험
- **기능 확장**: 정의된 MVP 기능에 엄격히 고수
- **과도한 엔지니어링**: 복잡한 솔루션보다 단순한 솔루션 선택
- **일정 압박**: 완벽한 코드보다 작동하는 소프트웨어에 집중

## 사용자 위험
- **제한된 기능**: 초기 사용자에게 MVP 특성을 명확히 전달
- **피드백 관리**: 피드백 수집은 하되 즉시 모든 것을 구현하지는 않음
- **기대치**: MVP 제한사항에 대한 명확한 기대치 설정

# 부록

## MVP 개발 철학
- **빠른 구축**: 완벽함보다 속도 우선
- **조기 검증**: 가능한 한 빨리 사용자 피드백 받기
- **빠른 반복**: 피드백을 다음 개발 단계 가이드로 활용
- **단순함 유지**: 필요성이 증명될 때까지 복잡성 추가 거부

## Post-MVP 계획
- MVP 피드백을 사용하여 메인 PRD 기능 우선순위 결정
- 사용 패턴을 이해하기 위한 사용자 분석 고려
- 사용자 요구사항 기반 점진적 기능 출시 계획
- MVP 학습을 바탕으로 확장성을 위한 설계
</PRD> 