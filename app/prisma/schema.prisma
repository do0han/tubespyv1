// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// User model for authentication and user management
model User {
  id                    String    @id @default(cuid())
  name                  String?
  email                 String    @unique
  emailVerified         DateTime? @map("email_verified")
  image                 String?
  googleId              String?   @unique @map("google_id")
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")
  
  // Data retention settings for automatic cleanup
  dataRetentionSettings Json?     @map("data_retention_settings")
  
  // Relations
  channels              Channel[]
  videos                Video[]
  accounts              Account[]
  sessions              Session[]
  
  @@map("users")
}

// Channel model for YouTube channel data
model Channel {
  id              String    @id @default(cuid())
  youtubeId       String    @map("youtube_id")
  title           String
  description     String?
  thumbnailUrl    String?   @map("thumbnail_url")
  customUrl       String?   @map("custom_url")
  
  // Channel Statistics
  subscriberCount Int?      @default(0) @map("subscriber_count")
  viewCount       Int?      @default(0) @map("view_count")
  videoCount      Int?      @default(0) @map("video_count")
  
  // Channel Metadata
  publishedAt     DateTime? @map("published_at")
  country         String?
  language        String?   @default("ko")
  
  // Timestamps
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  lastSyncAt      DateTime? @map("last_sync_at")
  
  // Relations
  userId          String    @map("user_id")
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  videos          Video[]
  
  @@unique([youtubeId, userId])
  @@map("channels")
}

// Video model for YouTube video data
model Video {
  id              String    @id @default(cuid())
  youtubeId       String    @map("youtube_id")
  title           String
  description     String?
  thumbnailUrl    String?   @map("thumbnail_url")
  
  // Video Metadata
  publishedAt     DateTime? @map("published_at")
  duration        String?   // ISO 8601 format (PT4M13S)
  categoryId      String?   @map("category_id")
  tags            String?   // JSON string으로 저장
  
  // Video Statistics
  viewCount       Int?      @default(0) @map("view_count")
  likeCount       Int?      @default(0) @map("like_count")
  commentCount    Int?      @default(0) @map("comment_count")
  
  // Video Status
  privacyStatus   String?   @default("public") @map("privacy_status") // public, unlisted, private
  uploadStatus    String?   @default("processed") @map("upload_status") // processed, uploaded, etc.
  
  // Timestamps
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  lastSyncAt      DateTime? @map("last_sync_at")
  
  // Relations
  channelId       String    @map("channel_id")
  channel         Channel   @relation(fields: [channelId], references: [id], onDelete: Cascade)
  userId          String    @map("user_id")
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([youtubeId, userId])
  @@map("videos")
}

// Account model for NextAuth.js (OAuth providers)
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// Session model for NextAuth.js
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// VerificationToken model for NextAuth.js
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
